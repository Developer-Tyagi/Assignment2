image: alpine:latest

variables:
  REPO_NAME: gitlab.com/cilalabs/claimguru/claimguru-ui
  DOCKER_REGISTRY: us-west1-docker.pkg.dev

stages:
  - build
  - deploy
  - cleanup

# This task creates image for MR review
build_review_image:
  stage: build
  image: us-west1-docker.pkg.dev/pre-prod-286801/cilalabs/common-utils/git-sops
  services:
    - name: docker:18.09.9-dind
      command: ['--mtu=1460']
  variables:
    GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
    SOPS_KMS: projects/pre-prod-286801/locations/global/keyRings/sops/cryptoKeys/sops-key
    APP_ENV: review
    DOCKER_HOST: tcp://127.0.0.1:2375
    DOCKER_IMAGE: us-west1-docker.pkg.dev/pre-prod-286801/claimguru/claimguru-ui:${CI_MERGE_REQUEST_IID}
  script:
    - echo "$SERVICE_ACCOUNT_KEY" > /tmp/key.json
    - sops --kms ${SOPS_KMS} -d docker/env.$APP_ENV > .env
    - docker build -t ${DOCKER_IMAGE} .
    - docker login -u _json_key --password-stdin https://${DOCKER_REGISTRY} < /tmp/key.json
    - docker push ${DOCKER_IMAGE}
  tags:
    - pre-production
  only:
    - merge_requests

# This task deploys MR review set up on cluster.
review_deploy:
  stage: deploy
  image:
    name: us-west1-docker.pkg.dev/pre-prod-286801/cilalabs/common-utils/kubeninja
  variables:
    DOCKER_IMAGE: us-west1-docker.pkg.dev/pre-prod-286801/claimguru/claimguru-ui:${CI_MERGE_REQUEST_IID}
    KUBE_NAMESPACE: claimguru-ui-${CI_MERGE_REQUEST_IID}
    GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
  script:
    - echo "$SERVICE_ACCOUNT_KEY" > /tmp/key.json
    - echo $CI_MERGE_REQUEST_IID
    - kubectl version
    - kubectl create namespace ${KUBE_NAMESPACE} --dry-run -o yaml | kubectl apply -f -
    - kubectl label namespace ${KUBE_NAMESPACE} istio-injection=enabled --dry-run -o yaml | kubectl apply -f -
    - sed -i "s/CI_COMMIT_SHORT_SHA/${CI_COMMIT_SHORT_SHA}/g" k8s/dev/crd-spec.yaml
    - sed -i "s/CI_MERGE_REQUEST_IID/${CI_MERGE_REQUEST_IID}/g" k8s/dev/crd-spec.yaml
    - sed -i "s~DOCKER_IMAGE~${DOCKER_IMAGE}~g" k8s/dev/crd-spec.yaml
    - sed -i "s/CI_JOB_ID/${CI_JOB_ID}/g" k8s/dev/crd-spec.yaml
    - kubectl apply -f k8s/dev/crd-spec.yaml --namespace ${KUBE_NAMESPACE}
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://claimguru-ui-${CI_MERGE_REQUEST_IID}.claimguru.cilalabs.dev
    on_stop: review_cleanup
  tags:
    - pre-production
  only:
    - merge_requests

# This task cleans up MR review set up.
review_cleanup:
  stage: cleanup
  needs:
    - review_deploy
  image:
    name: us-west1-docker.pkg.dev/pre-prod-286801/cilalabs/common-utils/kubeninja
  variables:
    KUBE_NAMESPACE: claimguru-ui-${CI_MERGE_REQUEST_IID}
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  script:
    - kubectl version
    - kubectl delete namespace ${KUBE_NAMESPACE}
  when: manual
  tags:
    - pre-production
  only:
    - merge_requests

# This task creates master image.
build_master_image:
  stage: build
  image: us-west1-docker.pkg.dev/pre-prod-286801/cilalabs/common-utils/git-sops
  services:
    - name: docker:18.09.9-dind
      command: ['--mtu=1460']
  variables:
    GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
    SOPS_KMS: projects/pre-prod-286801/locations/global/keyRings/sops/cryptoKeys/sops-key
    APP_ENV: pre-production
    DOCKER_HOST: tcp://127.0.0.1:2375
    DOCKER_IMAGE: us-west1-docker.pkg.dev/pre-prod-286801/claimguru/claimguru-ui
  script:
    - echo "$SERVICE_ACCOUNT_KEY" > /tmp/key.json
    - sops --kms ${SOPS_KMS} -d docker/env.$APP_ENV > .env
    - docker build -t ${DOCKER_IMAGE} .
    - docker login -u _json_key --password-stdin https://${DOCKER_REGISTRY} < /tmp/key.json
    - docker push ${DOCKER_IMAGE}
  tags:
    - pre-production
  only:
    - master

# This task deploy pre production set up.
pre_prod_deploy:
  stage: deploy
  image:
    name: us-west1-docker.pkg.dev/pre-prod-286801/cilalabs/common-utils/kubeninja
  variables:
    DOCKER_IMAGE: us-west1-docker.pkg.dev/pre-prod-286801/claimguru/claimguru-ui
    KUBE_NAMESPACE: claimguru
    GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
  script:
    - echo "$SERVICE_ACCOUNT_KEY" > /tmp/key.json
    - kubectl version
    - kubectl create namespace ${KUBE_NAMESPACE} --dry-run -o yaml | kubectl apply -f -
    - kubectl label namespace ${KUBE_NAMESPACE} istio-injection=enabled --dry-run -o yaml | kubectl apply -f -
    - sed -i "s/CI_COMMIT_SHORT_SHA/${CI_COMMIT_SHORT_SHA}/g" k8s/pre-prod/crd-spec.yaml
    - sed -i "s~DOCKER_IMAGE~${DOCKER_IMAGE}~g" k8s/pre-prod/crd-spec.yaml
    - sed -i "s/CI_JOB_ID/${CI_JOB_ID}/g" k8s/pre-prod/crd-spec.yaml
    - kubectl apply -f k8s/pre-prod/crd-spec.yaml --namespace ${KUBE_NAMESPACE}
  environment:
    name: pre-production
    url: https://claimguru.cilalabs.dev
  tags:
    - pre-production
  only:
    - master

# This task creates demo image.
build_demo_image:
  stage: build
  image: us-west1-docker.pkg.dev/pre-prod-286801/cilalabs/common-utils/git-sops
  services:
    - name: docker:18.09.9-dind
      command: ['--mtu=1460']
  variables:
    GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
    SOPS_KMS: projects/pre-prod-286801/locations/global/keyRings/sops/cryptoKeys/sops-key
    APP_ENV: demo
    DOCKER_HOST: tcp://127.0.0.1:2375
    DOCKER_IMAGE: us-west1-docker.pkg.dev/pre-prod-286801/claimguru/claimguru-ui:demo
  script:
    - echo "$SERVICE_ACCOUNT_KEY" > /tmp/key.json
    - sops --kms ${SOPS_KMS} -d docker/env.$APP_ENV > .env
    - docker build -t ${DOCKER_IMAGE} .
    - docker login -u _json_key --password-stdin https://${DOCKER_REGISTRY} < /tmp/key.json
    - docker push ${DOCKER_IMAGE}
  tags:
    - pre-production
  only:
    - master
  when: manual

# This task deploy demo set up.
demo_deploy:
  stage: deploy
  image:
    name: us-west1-docker.pkg.dev/pre-prod-286801/cilalabs/common-utils/kubeninja
  variables:
    DOCKER_IMAGE: us-west1-docker.pkg.dev/pre-prod-286801/claimguru/claimguru-ui:demo
    KUBE_NAMESPACE: demo-claimguru
    GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
  script:
    - echo "$SERVICE_ACCOUNT_KEY" > /tmp/key.json
    - kubectl version
    - kubectl create namespace ${KUBE_NAMESPACE} --dry-run -o yaml | kubectl apply -f -
    - kubectl label namespace ${KUBE_NAMESPACE} istio-injection=enabled --dry-run -o yaml | kubectl apply -f -
    - sed -i "s/CI_COMMIT_SHORT_SHA/${CI_COMMIT_SHORT_SHA}/g" k8s/demo/crd-spec.yaml
    - sed -i "s~DOCKER_IMAGE~${DOCKER_IMAGE}~g" k8s/demo/crd-spec.yaml
    - sed -i "s/CI_JOB_ID/${CI_JOB_ID}/g" k8s/demo/crd-spec.yaml
    - kubectl apply -f k8s/demo/crd-spec.yaml --namespace ${KUBE_NAMESPACE}
  environment:
    name: demo
    url: https://demo.claimguru.cilalabs.dev
  tags:
    - pre-production
  only:
    - master
  when: manual

# This task creates image associated with tag
build_tag_image:
  stage: build
  image: us-west1-docker.pkg.dev/claimguru-97138/claimguru/common-utils/git-sops
  services:
    - name: docker:18.09.9-dind
      command: ['--mtu=1460']
  variables:
    GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
    SOPS_KMS: projects/claimguru-97138/locations/global/keyRings/sops/cryptoKeys/sops-key
    APP_ENV: production
    DOCKER_HOST: tcp://127.0.0.1:2375
    DOCKER_IMAGE: us-west1-docker.pkg.dev/claimguru-97138/claimguru/claimguru-ui:${CI_COMMIT_TAG}
  script:
    - echo "$PROD_SERVICE_ACCOUNT_KEY"  > /tmp/key.json
    - sops --kms ${SOPS_KMS} -d docker/env.$APP_ENV > .env
    - docker build -t ${DOCKER_IMAGE} .
    - docker login -u _json_key --password-stdin https://${DOCKER_REGISTRY} < /tmp/key.json
    - docker push ${DOCKER_IMAGE}
  tags:
    - production
  only:
    - tags

# This task deploy production set up.
prod_deploy:
  stage: deploy
  image:
    name: cilalabs/kubeninja
  variables:
    KUBE_NAMESPACE: claimguru
    GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
    DOCKER_IMAGE: us-west1-docker.pkg.dev/claimguru-97138/claimguru/claimguru-ui:${CI_COMMIT_TAG}
  script:
    - echo "$PROD_SERVICE_ACCOUNT_KEY" > /tmp/key.json
    - kubectl version
    - kubectl create namespace ${KUBE_NAMESPACE} --dry-run -o yaml | kubectl apply -f -
    - kubectl label --overwrite namespace ${KUBE_NAMESPACE} istio-injection=enabled
    - sed -i "s/IMAGE_TAG/${CI_COMMIT_TAG}/g" k8s/prod/crd-spec.yaml
    - sed -i "s~DOCKER_IMAGE~${DOCKER_IMAGE}~g" k8s/prod/crd-spec.yaml
    - sed -i "s/CI_JOB_ID/${CI_JOB_ID}/g" k8s/prod/crd-spec.yaml
    - kubectl apply -f k8s/prod/crd-spec.yaml --namespace ${KUBE_NAMESPACE}
  environment:
    name: production
    url: https://claimguru.com
  tags:
    - production
  only:
    - tags
